import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv 
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta


load_dotenv()  
TOKEN = os.getenv('BOT_TOKEN')  

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†"),
        types.KeyboardButton(text="–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?"),
        types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
        types.KeyboardButton(text="–ü–æ–º–æ—â—å")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async def generate_calendar(year=None, month=None):
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    
    keyboard = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º + –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", 
              "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
    
    keyboard.row(
        types.InlineKeyboardButton(text="‚Üê", callback_data=f"prev_month_{year}_{month}"),
        types.InlineKeyboardButton(text=f"{months[month-1]} {year}", callback_data="ignore"),
        types.InlineKeyboardButton(text="‚Üí", callback_data=f"next_month_{year}_{month}"),
        width=3
    )
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    buttons = [types.InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days]
    keyboard.row(*buttons)
    
    # –î–∞—Ç—ã –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1)
    last_day = (first_day + relativedelta(months=1)) - timedelta(days=1)
    
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range((first_day.weekday()) % 7):
        keyboard.add(types.InlineKeyboardButton(text=" ", callback_data="ignore"))
    
    # –ö–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    for day in range(1, last_day.day + 1):
        keyboard.add(types.InlineKeyboardButton(
            text=str(day), 
            callback_data=f"select_{year:02d}-{month:02d}-{day:02d}")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    keyboard.row(types.InlineKeyboardButton(
        text="–°–µ–≥–æ–¥–Ω—è", 
        callback_data="select_today")
    )
    
    return keyboard.as_markup()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
        "¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†¬ª - –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?¬ª - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "¬´–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É¬ª - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–ü–æ–º–æ—â—å¬ª - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await cmd_help(message)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É")
async def change_date_button(message: types.Message):
    keyboard = await generate_calendar()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†"
@dp.message(lambda message: message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†")
async def set_birthday_button(message: types.Message):
    user_data[message.from_user.id] = {"waiting_for_birthday": True}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05):")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
@dp.callback_query(lambda c: c.data.startswith(('prev_month_', 'next_month_')))
async def process_calendar_navigation(callback_query: types.CallbackQuery):
    _, _, year, month = callback_query.data.split('_')
    year = int(year)
    month = int(month)
    
    if callback_query.data.startswith('prev_month_'):
        new_date = datetime(year, month, 1) - relativedelta(months=1)
    else:
        new_date = datetime(year, month, 1) + relativedelta(months=1)
    
    keyboard = await generate_calendar(new_date.year, new_date.month)
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer()


# –í—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@dp.callback_query(lambda c: c.data.startswith('select_'))
async def process_date_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    if callback_query.data == 'select_today':
        selected_date = datetime.now()
    else:
        date_str = callback_query.data.split('_')[1]
        selected_date = datetime.strptime(date_str, "%Y-%m-%d")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü (–±–µ–∑ –≥–æ–¥–∞)
    user_data[user_id] = {
        "birthday": (selected_date.day, selected_date.month),
        "waiting_for_birthday": False
    }
    
    await callback_query.answer(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {selected_date.day}.{selected_date.month}")
    await callback_query.message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_date.day}.{selected_date.month}",
        reply_markup=get_main_menu()
    )
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
@dp.message()
async def process_birthday(message: types.Message):
    user_id = message.from_user.id
    
    if user_id in user_data and user_data[user_id].get("waiting_for_birthday"):
        try:
            day, month = map(int, message.text.split('.'))
            if 1 <= day <= 31 and 1 <= month <= 12:
                user_data[user_id] = {
                    "birthday": (day, month),
                    "waiting_for_birthday": False
                }
                await message.answer(f"‚úÖ –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {day}.{month}", reply_markup=get_main_menu())
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05)")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
