import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv 



load_dotenv()  
TOKEN = os.getenv('BOT_TOKEN')  

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†"),
        types.KeyboardButton(text="–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?"),
        types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
        types.KeyboardButton(text="–ü–æ–º–æ—â—å")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
        "¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†¬ª - –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?¬ª - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "¬´–ú–æ–π –î–†¬ª - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–ü–æ–º–æ—â—å¬ª - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await cmd_help(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∑–∞–≥–ª—É—à–∫–∏)
@dp.message(lambda message: message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"])
async def menu_buttons(message: types.Message):
    await message.answer(
        
        reply_markup=get_main_menu()
    )


user_data = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è! ")

    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05):")

    user_data[message.from_user.id] = {"waiting_for_birthday": True}

@dp.message()
async def process_birthday(message: types.Message):
    user_id = message.from_user.id
    
  
    if user_id in user_data and user_data[user_id].get("waiting_for_birthday"):
        try:
            
            day, month = map(int, message.text.split('.'))
            if 1 <= day <= 31 and 1 <= month <= 12:
                
                user_data[user_id]["birthday"] = (day, month)
                user_data[user_id]["waiting_for_birthday"] = False
                
                await message.answer(f"‚úÖ –¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {day}.{month}")
                await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã!")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú")
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05)")




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
