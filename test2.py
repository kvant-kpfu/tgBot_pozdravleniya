import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv  

load_dotenv()  
TOKEN = os.getenv('BOT_TOKEN')  

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
birthdays = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Reply-–∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†"),
        types.KeyboardButton(text="–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?"),
        types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É"),
        types.KeyboardButton(text="–ü–æ–º–æ—â—å")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )



async def generate_calendar(year=None, month=None):
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    

@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É")
async def change_date_button(message: types.Message):
    keyboard = await generate_calendar()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: –ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990", reply_markup=keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "¬´–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†¬ª - –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?¬ª - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "¬´–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É¬ª - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "¬´–ü–æ–º–æ—â—å¬ª - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†"
@dp.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†")
async def set_birthday(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
    await message.answer(
        "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(F.text.regexp(r'^\d{2}\.\d{2}\.\d{4}$'))
async def process_birthday(message: types.Message):
    try:
        day, month, year = map(int, message.text.split('.'))
        birthdays[message.from_user.id] = datetime(year, month, day)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {day:02d}.{month:02d}.{year} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=get_main_menu()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?"
@dp.message(F.text == "–°–∫–æ–ª—å–∫–æ –¥–æ –î–†?")
async def days_until_birthday(message: types.Message):
    if message.from_user.id not in birthdays:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return
    
    today = datetime.now()
    bday = birthdays[message.from_user.id]
    next_bday = datetime(today.year, bday.month, bday.day)
    
    if today > next_bday:
        next_bday = datetime(today.year + 1, bday.month, bday.day)
    
    delta = (next_bday - today).days
    
    if delta == 0:
        await message.answer("üéâ –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéÇ")
    else:
        await message.answer(f"–î–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    await cmd_help(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
